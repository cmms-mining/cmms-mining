services:
  nginx:
    restart: always
    build:
        context: ./deploy/nginx
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    volumes:
      - ./deploy/persistentdata/nginx:/etc/nginx/conf.d
      - ./deploy/persistentdata/certbot/conf:/etc/letsencrypt
      - ./deploy/persistentdata/certbot/www:/var/www/certbot
      - ./deploy/persistentdata/static:/var/www/static
      - ./deploy/persistentdata/uploads:/var/www/uploads
  django-backend:
    restart: always
    build:
      context: .
    env_file:
      - ./environment/.env.prod
    command: >
      sh -c "python manage.py migrate && python manage.py collectstatic --noinput && gunicorn -w 3 core.wsgi --bind 0.0.0.0:8000"
    depends_on:
      - postgresql-db
    image: djangobackend
    volumes:
      - ./deploy/persistentdata/static:/var/www/static
      - ./deploy/persistentdata/uploads:/var/www/uploads
  postgresql-db:
    restart: always
    image: postgres:16
    command:
      - "postgres"
      - "-c"
      - "port=5432"
    ports:
      - "5432:5432"
    volumes:
      - ./deploy/persistentdata/db:/var/lib/postgresql/data
    env_file:
      - ./deploy/postgresql-db/.pg-env
  certbot:
    image: certbot/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./deploy/persistentdata/certbot/conf:/etc/letsencrypt
      - ./deploy/persistentdata/certbot/www:/var/www/certbot
  backup:
    build:
      context: ./deploy/backup
    volumes:
      - ./deploy/persistentdata/backups:/backups
    env_file:
      - ./deploy/backup/.pg-env
    depends_on:
      - postgresql-db